
#
# xpld program to find Advent of code 2020 problem 1/part 1 solution
#

ORGCODE 0x00600000
ORGDS 0x00610000

strAocProblem1 ds "Advent of code 2020 problem 1 part 1"
strAocFinding ds "Finding two numbers that sum to 2020"
strAocSolutionFound ds "Found:"
strAocAndTheWinnerIs ds "And their product is:"

?NUMAOC01NUMBERS equ 200
aoc01listOfNumbers dd 997,1582,1790,1798,1094,1831,1879,1730,1995,1702,1680,1869,1964,1777,1862,1928,1997,1741,1604,1691,1219,1458,1749,1717,1786,1665,1724,1998,1589,1828,1953,1848,1500,1590,1968,1948,1323,1800,1986,679,1907,1916,1820,1661,1479,1808,1824,1825,1952,1666,1541,1791,1906,1638,1557,1999,1710,1549,1912,1974,1628,1748,1411,1978,1865,1932,1839,1892,1981,1807,357,912,1443,1972,1816,1890,1029,1175,1522,1750,2001,1655,1955,1949,1660,233,1891,1994,1934,1908,1573,1712,1622,1770,1574,1778,1851,2004,1818,1200,1229,1110,1005,1716,1765,1835,1773,15,1914,1833,1689,1843,1718,1872,390,1941,1178,1670,1899,1864,1913,2010,1855,1797,1767,1673,1657,1607,1305,1341,1662,1845,1980,1534,1789,1876,1849,1926,1958,977,1709,1647,1832,1785,1854,1667,1679,1970,1186,2000,1681,1684,1614,1988,1561,1594,1636,1327,1696,1915,1045,1829,1079,1295,1213,1714,1992,1984,1951,1687,1842,1792,87,1732,428,1799,1850,1962,1629,1965,1142,1040,131,1844,1454,1779,1369,1960,1887,1725,1893,1465,1676,1826,1462,1408,1937,1643,1069,1759

#
#
#

jsr solveAoc01
rts

#
# waitForRetrace
# (c) friol 1999
#

.waitForRetrace:
push r0
@@wfrLoop:
ld8 r0,[0x20000000]
and r0,0x02
cmp r0,0x02
jnz @@wfrLoop
pop r0
rts

#
# sub: output 0-terminated string to mode0 videoram
# r0: ptr to string
# r1: row
# r2: col
#

.outputStringMode0:
push r3
push r4

ld r4,0x10000000
add r4,r2
mul r1,40
add r4,r1
@@printstring:
ld8 r3,[r0]
cmp r3,0
jnz @@printinner
pop r4
pop r3
rts

@@printinner:
sub r3,0x20
ld8 [r4],r3
add r0,1
add r4,1
jmp @@printstring
rts

#
# output decimal number to screen
# the return
# r0=number to print
# r15=row
#

.outputDecimalNumber2:

push r1
push r2
push r3
push r4
push r5

ld r2,0x00500000
ld r3,1
ld r4,0

@@decNumCycle:
ld r1,r0
div r1,r3
cmp r1,0
jz @@doneOutputDecNum
mod r1,10
add r1,0x10
ld8 [r2],r1
add r2,1
mul r3,10
add r4,1
jmp @@decNumCycle

@@doneOutputDecNum:

sub r2,1
ld r1,r15
mul r1,40
add r1,0x10000000

@@writeOnScreenNumCycle:
ld8 r5,[r2]
ld8 [r1],r5
add r1,1
sub r2,1
sub r4,1
cmp r4,0
jnz @@writeOnScreenNumCycle

pop r5
pop r4
pop r3
pop r2
pop r1
rts

#
# aoc01 problem part 1 solution found
# r3=number 1
# r4=number 2
#

.aoc01win:

ld r0,strAocSolutionFound
ld r1,2
ld r2,0
jsr outputStringMode0

ld r0,r3
ld r15,3
jsr outputDecimalNumber2

ld r0,r4
ld r15,4
jsr outputDecimalNumber2

ld r0,strAocAndTheWinnerIs
ld r1,5
ld r2,0
jsr outputStringMode0

mul r3,r4
ld r0,r3
ld r15,6
jsr outputDecimalNumber2

ld8 [0x20010010],0
ld8 [0x20010011],7

rts

#
# main routine
#

.solveAoc01:

push r0
push r1
push r2
push r3
push r4
push r5
push r6
push r7

# clear screen

ld r0,0x10000000
ld r1,0x10001000

@@clearCycle:
jsr waitForRetrace

ld8 [r0],0
ld8 [r1],0x54

add r1,1
add r0,1
cmp r0,0x100004af
jnz @@clearCycle

# write program name
ld r0,strAocProblem1
ld r1,0
ld r2,0
jsr outputStringMode0

ld r0,strAocFinding
ld r1,1
ld r2,0
jsr outputStringMode0

ld r0,aoc01listOfNumbers
ld r6,0
ld r1,aoc01listOfNumbers
ld r7,0

@@sumAocCycle:
ld32 r3,[r0]
ld32 r4,[r1]
cmp r3,r4
jz @@dontSumNumbers
ld r5,r3
add r5,r4
cmp r5,2020
jnz @@dontSumNumbers

jsr aoc01win
hlt

@@dontSumNumbers:
add r1,4
add r7,1
cmp r7,?NUMAOC01NUMBERS
jnz @@sumAocCycle

ld r1,aoc01listOfNumbers
ld r7,0
add r0,4
add r6,1
cmp r6,?NUMAOC01NUMBERS
jnz @@sumAocCycle

pop r7
pop r6
pop r5
pop r4
pop r3
pop r2
pop r1
pop r0
rts
